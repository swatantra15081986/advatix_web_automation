"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CsvParser = void 0;
// tslint:disable-next-line:no-var-requires
const csv = require('csv-parser');
const class_transformer_1 = require("class-transformer");
const common_1 = require("@nestjs/common");
const csvkey_decorator_1 = require("./csvkey.decorator");
let CsvParser = class CsvParser {
    parse(stream, Entity, count = null, offset = null, csvConfig = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                let i = 0;
                let c = 0;
                const list = [];
                const errors = [];
                const pipedStream = stream.pipe(csv(Object.assign({ strict: true, separator: ';' }, csvConfig)));
                pipedStream.on('error', (e) => {
                    errors.push(e);
                    reject({ errors });
                });
                pipedStream.on('data', line => {
                    i++;
                    if (count) {
                        if (c >= count) {
                            return;
                        }
                        if (offset && (i - 1) < offset) {
                            return;
                        }
                        c++;
                    }
                    list.push(this.processLine(line, Entity));
                });
                pipedStream.on('end', () => errors.length > 0 ?
                    reject({ errors })
                    :
                        resolve({
                            list,
                            count,
                            offset,
                            total: i,
                        }));
            });
        });
    }
    processLine(line, Entity) {
        const entityInstance = new Entity();
        const plain = {};
        const plainLine = class_transformer_1.classToPlain(line);
        Object.keys(plainLine).forEach((key) => {
            const remapKey = csvkey_decorator_1.getCsvKey(entityInstance, key);
            plain[remapKey || key] = plainLine[key];
        });
        return class_transformer_1.plainToClass(Entity, plain);
    }
};
CsvParser = __decorate([
    common_1.Injectable()
], CsvParser);
exports.CsvParser = CsvParser;
